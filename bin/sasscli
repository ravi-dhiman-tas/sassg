#!/usr/bin/env node

process.title = "sassg"

var fs = require('fs'),
    mkdirp = require('mkdirp'),
    path = require('path'),
    program = require('commander'),
    readline = require('readline'),
    installApp = require('../scripts/install'),
    generateFiles = require('../scripts/generate'),
    watchCmd = require('../scripts/run'),
    MODE_0666 = parseInt('0666', 8),
    MODE_0755 = parseInt('0755', 8),
    pkg = require('../package.json'),
    configFile = 'sassg.json',
    version = pkg.version,
    _exit = process.exit



process.exit = exit


// CLI

around(program, 'optionMissingArgument', function (fn, args) {
    program.outputHelp()
    fn.apply(this, args)
    return {
        args: [],
        unknown: []
    }
})


before(program, 'outputHelp', function () {
    // track if help was shown for unknown option
    this._helpShown = true
})


before(program, 'unknownOption', function () {
    // allow unknown options if help was shown, to prevent trailing error
    this._allowUnknownOption = this._helpShown

    // show help if not yet shown
    if (!this._helpShown) {
        program.outputHelp()
    }
})


program
    .version(version, '    --version')
    .usage('[new] [dir]')
    .option('    new [value]', 'create new sass/scss project')
    .option('-s, --sass', 'use sass stylesheet (defaults to scss)')
    .option('-u, --unit [value]', 'specify units (px|em|rem) (defaults to px)')
    .option('g,  generate', 'generate component')
    .option('watch', 'run compiler in watch mode')
    .option('build', 'build stylesheet in dist')
    .option('-f, --force', 'force on non-empty directory')
    .parse(process.argv)


if (!exit.exited) {
    main()
}


/**
 * Install an around function; AOP.
 */

function around(obj, method, fn) {
    var old = obj[method]

    obj[method] = function () {
        var args = new Array(arguments.length)
        for (var i = 0; i < args.length; i++) args[i] = arguments[i]
        return fn.call(this, old, args)
    }
}


/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
    var old = obj[method]

    obj[method] = function () {
        fn.call(this)
        old.apply(this, arguments)
    }
}


/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    })

    rl.question(msg, function (input) {
        rl.close()
        callback(/^y|yes|ok|true$/i.test(input))
    })
}


/**
 * Create application at the given directory `path`.
 *
 * @param {String} name
 * @param {String} path
 */

function createApplication(name, path) {
    var type = 'scss';
    if(program.sass) {
        type = 'sass';
    }
    installApp({
        path: path,
        name: name,
        type: type,
        version: version,
        configFile: configFile,
        unit: program.unit || 'default'
    })
}


/**
 * Create an app name from a directory path, fitting npm naming requirements.
 *
 * @param {String} pathName
 */

function createAppName(pathName) {
    return path.basename(pathName)
        .replace(/[^A-Za-z0-9.()!~*'-]+/g, '-')
        .replace(/^[-_.]+|-+$/g, '')
        .toLowerCase()
}


/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
    fs.readdir(path, function (err, files) {
        if (err && err.code !== 'ENOENT') throw err
        fn(!files || !files.length)
    })
}


/**
 * Graceful exit for async STDIO
 */

function exit(code) {
    // flush output for Node.js Windows pipe bug
    // https://github.com/joyent/node/issues/6247 is just one bug example
    // https://github.com/visionmedia/mocha/issues/333 has a good discussion
    function done() {
        if (!(draining--)) _exit(code)
    }

    var draining = 0
    var streams = [process.stdout, process.stderr]

    exit.exited = true

    streams.forEach(function (stream) {
        // submit empty write request and wait for completion
        draining += 1
        stream.write('', done)
    })

    done()
}


/**
 * Main program.
 */

function main() {
    // Path
    if( program.generate ) {
        generateFiles({
            configFile: configFile,
            file_name: program.args.shift()
        })
    } else if(program.watch) {
        watchCmd({
            configFile: configFile
        })
    } else {
        var destinationPath = program.new || '.'

        // App name
        var appName = createAppName(path.resolve(destinationPath)) || 'hello-world'

        // Generate application
        emptyDirectory(destinationPath, function (empty) {
            if (empty || program.force) {
                createApplication(appName, destinationPath)
            } else {
                confirm('destination is not empty, continue? [y/N] ', function (ok) {
                    if (ok) {
                        process.stdin.destroy()
                        createApplication(appName, destinationPath)
                    } else {
                        console.error('aborting')
                        exit(1)
                    }
                })
            }
        })
    }
}